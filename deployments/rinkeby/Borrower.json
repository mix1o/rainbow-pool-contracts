{
  "address": "0x8D30cC17A21b360607894906EAF182c818A20105",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_repayment",
          "type": "uint256"
        }
      ],
      "name": "sendBackTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x094cfaf1f8faf72b96a1d7384d79d9b0964123a746a5cb836ccec780ecb3400d",
  "receipt": {
    "to": null,
    "from": "0xcB3c4f5F817604f3c8B5C7e1Ecab480279C449d0",
    "contractAddress": "0x8D30cC17A21b360607894906EAF182c818A20105",
    "transactionIndex": 32,
    "gasUsed": "290974",
    "logsBloom": "0x
    "blockHash": "0xa2299fe26b14be6ab09101f28655e403043528120a1d010a0bc067083dc566bd",
    "transactionHash": "0x094cfaf1f8faf72b96a1d7384d79d9b0964123a746a5cb836ccec780ecb3400d",
    "logs": [
      {
        "transactionIndex": 32,
        "blockNumber": 9693240,
        "transactionHash": "0x094cfaf1f8faf72b96a1d7384d79d9b0964123a746a5cb836ccec780ecb3400d",
        "address": "0x8D30cC17A21b360607894906EAF182c818A20105",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cb3c4f5f817604f3c8b5c7e1ecab480279c449d0"
        ],
        "data": "0x",
        "logIndex": 93,
        "blockHash": "0xa2299fe26b14be6ab09101f28655e403043528120a1d010a0bc067083dc566bd"
      }
    ],
    "blockNumber": 9693240,
    "cumulativeGasUsed": "10295329",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "426b85d6d2ca726e20a7ece9d695fd03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_repayment\",\"type\":\"uint256\"}],\"name\":\"sendBackTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Borrowers.sol\":\"Borrower\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/Borrowers.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IBorrowers.sol\\\";\\nimport \\\"./interfaces/IFlashLoan.sol\\\";\\n\\ncontract Borrower is Ownable, Borrowers {\\n  function sendBackTokens(\\n    address _tokenAddress,\\n    address _recipient,\\n    uint256 _repayment\\n  ) public virtual override {\\n    IERC20(_tokenAddress).transferFrom(owner(), _recipient, _repayment);\\n  }\\n}\\n\\ncontract Reentrance is Ownable, Borrowers {\\n  address public lender;\\n\\n  constructor(address _lender) {\\n    lender = _lender;\\n  }\\n\\n  function sendBackTokens(\\n    address _tokenAddress,\\n    address _recipient,\\n    uint256 _repayment\\n  ) public override {\\n    IERC20(_tokenAddress).transferFrom(owner(), _recipient, _repayment);\\n\\n    IFlashLoan(lender).borrowTokens(address(this), _tokenAddress, 1000);\\n  }\\n}\\n\\ncontract Thief is Ownable, Borrowers {\\n  function sendBackTokens(\\n    address _tokenAddress,\\n    address _recipient,\\n    uint256 _repayment\\n  ) public override {}\\n}\\n\",\"keccak256\":\"0x2a41aad3f0d5b0d3fc23b601c7bb9a54070ca68e2b8b1e1eaabef59020cee733\"},\"contracts/interfaces/IBorrowers.sol\":{\"content\":\"interface Borrowers {\\n    function sendBackTokens(\\n        address _tokenAddress,\\n        address _recipient,\\n        uint256 _repayment\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7c0da9324a1e9201014bf74998f4a1ffe3a2e9eb51306e20956d7e866ff8ac74\"},\"contracts/interfaces/IFlashLoan.sol\":{\"content\":\"interface IFlashLoan {\\n    function borrowTokens(\\n        address _userContract,\\n        address _tokenAddress,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3d600ef5b4601cf4530321869539318a4a25f4c8e65584320ff9ec2f882ba8f5\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002161001c610026565b61002a565b61007a565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6103d7806100896000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301c806cc14610051578063715018a6146100665780638da5cb5b1461006e578063f2fde38b1461008c575b600080fd5b61006461005f366004610293565b61009f565b005b61006461012e565b610076610182565b60405161008391906102ee565b60405180910390f35b61006461009a366004610272565b610191565b826001600160a01b03166323b872dd6100b6610182565b84846040518463ffffffff1660e01b81526004016100d693929190610302565b602060405180830381600087803b1580156100f057600080fd5b505af1158015610104573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012891906102ce565b50505050565b610136610202565b6001600160a01b0316610147610182565b6001600160a01b0316146101765760405162461bcd60e51b815260040161016d9061036c565b60405180910390fd5b6101806000610206565b565b6000546001600160a01b031690565b610199610202565b6001600160a01b03166101aa610182565b6001600160a01b0316146101d05760405162461bcd60e51b815260040161016d9061036c565b6001600160a01b0381166101f65760405162461bcd60e51b815260040161016d90610326565b6101ff81610206565b50565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461026d57600080fd5b919050565b600060208284031215610283578081fd5b61028c82610256565b9392505050565b6000806000606084860312156102a7578182fd5b6102b084610256565b92506102be60208501610256565b9150604084013590509250925092565b6000602082840312156102df578081fd5b8151801515811461028c578182fd5b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea26469706673582212209e8e7c25abfa4b19dd8f37ab8dbeb3d3eb55f89d6798abe6168b91264ddb383264736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806301c806cc14610051578063715018a6146100665780638da5cb5b1461006e578063f2fde38b1461008c575b600080fd5b61006461005f366004610293565b61009f565b005b61006461012e565b610076610182565b60405161008391906102ee565b60405180910390f35b61006461009a366004610272565b610191565b826001600160a01b03166323b872dd6100b6610182565b84846040518463ffffffff1660e01b81526004016100d693929190610302565b602060405180830381600087803b1580156100f057600080fd5b505af1158015610104573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012891906102ce565b50505050565b610136610202565b6001600160a01b0316610147610182565b6001600160a01b0316146101765760405162461bcd60e51b815260040161016d9061036c565b60405180910390fd5b6101806000610206565b565b6000546001600160a01b031690565b610199610202565b6001600160a01b03166101aa610182565b6001600160a01b0316146101d05760405162461bcd60e51b815260040161016d9061036c565b6001600160a01b0381166101f65760405162461bcd60e51b815260040161016d90610326565b6101ff81610206565b50565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461026d57600080fd5b919050565b600060208284031215610283578081fd5b61028c82610256565b9392505050565b6000806000606084860312156102a7578182fd5b6102b084610256565b92506102be60208501610256565b9150604084013590509250925092565b6000602082840312156102df578081fd5b8151801515811461028c578182fd5b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea26469706673582212209e8e7c25abfa4b19dd8f37ab8dbeb3d3eb55f89d6798abe6168b91264ddb383264736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 591,
        "contract": "contracts/Borrowers.sol:Borrower",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}